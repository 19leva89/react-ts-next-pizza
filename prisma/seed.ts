/* eslint-disable @typescript-eslint/no-explicit-any */
import fs from 'fs'
import { hashSync } from 'bcrypt'
import { prisma } from './../prisma/db'
import { categories, ingredients, products, storyItems, stories } from './constants'

const randomNumber = (min: number, max: number) => {
	return Math.floor(Math.random() * (max - min) * 10 + min * 10) / 10
}

async function up() {
	const data = JSON.parse(fs.readFileSync('./prisma/ua_locations_10_11_2021.json', 'utf8'))

	const states = [] // –û–±–ª–∞—Å—Ç–∏
	const districts = [] // –†–∞–∏ÃÜ–æ–Ω—ã
	const communities = [] // –ì—Ä–æ–º–∞–¥—ã
	const cities = [] // –ì–æ—Ä–æ–¥–∞
	const villages = [] // –°–µ–ª–∞

	for (const item of data) {
		switch (item.type) {
			case 'STATE':
				states.push(item)
				break
			case 'DISTRICT':
				districts.push(item)
				break
			case 'COMMUNITY':
				communities.push(item)
				break
			case 'CITY':
				cities.push(item)
				break
			case 'VILLAGE':
				villages.push(item)
				break
		}
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±–ª–∞—Å—Ç–µ–π
	for (const state of states) {
		const createdState = await prisma.state.create({
			data: {
				name: state.name.uk,
			},
		})

		// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ä–∞–π–æ–Ω–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –æ–±–ª–∞—Å—Ç—è–º–∏
		const relatedDistricts = districts.filter((district) => district.parent_id === state.id)
		for (const district of relatedDistricts) {
			const createdDistrict = await prisma.district.create({
				data: {
					name: district.name.uk,
					stateId: createdState.id, // –°–≤—è–∑—å —Å –æ–±–ª–∞—Å—Ç—å—é
				},
			})

			// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≥—Ä–æ–º–∞–¥, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ä–∞–π–æ–Ω–∞–º–∏
			const relatedCommunities = communities.filter((community) => community.parent_id === district.id)
			for (const community of relatedCommunities) {
				const createdCommunity = await prisma.community.create({
					data: {
						name: community.name.uk,
						districtId: createdDistrict.id, // –°–≤—è–∑—å —Å —Ä–∞–π–æ–Ω–æ–º
					},
				})

				// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –≥—Ä–æ–º–∞–¥–∞–º–∏
				const relatedCities = cities.filter((city) => city.parent_id === community.id)
				await prisma.city.createMany({
					data: relatedCities.map((city) => ({
						name: city.name.uk,
						communityId: createdCommunity.id, // –°–≤—è–∑—å —Å –≥—Ä–æ–º–∞–¥–æ–π
					})),
				})

				// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å–µ–ª, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –≥—Ä–æ–º–∞–¥–∞–º–∏
				const relatedVillages = villages.filter((village) => village.parent_id === community.id)
				await prisma.village.createMany({
					data: relatedVillages.map((village) => ({
						name: village.name.uk,
						communityId: createdCommunity.id, // –°–≤—è–∑—å —Å –≥—Ä–æ–º–∞–¥–æ–π
					})),
				})
			}
		}
	}

	await prisma.user.createMany({
		data: [
			{
				fullName: 'User',
				email: 'user@gmail.com',
				password: hashSync('IntelPentiumv2', 10),
				verified: new Date(),
				role: 'USER',
			},
			{
				fullName: 'Admin',
				email: 'admin@gmail.com',
				password: hashSync('IntelPentiumv2', 10),
				verified: new Date(),
				role: 'ADMIN',
			},
		],
	})

	await prisma.category.createMany({
		data: categories,
	})

	await prisma.ingredient.createMany({
		data: ingredients,
	})

	await prisma.product.createMany({
		data: products,
	})

	const pizza1 = await prisma.product.create({
		data: {
			name: '–ë–µ—Ñ—Å—Ç—Ä–æ–≥–∞–Ω—ñ–≤',
			imageUrl: '/assets/img/pizzas/beef-stroganoff',
			categoryId: 1,
			ingredients: {
				connect: [ingredients[1], ingredients[6], ingredients[11], ingredients[2], ingredients[13]],
			},
		},
	})

	const pizza2 = await prisma.product.create({
		data: {
			name: `–ú'—è—Å–Ω–∞ –∑ –∞–¥–∂–∏–∫–æ—é üå∂üå∂`,
			imageUrl: '/assets/img/pizzas/meat-with-adjika',
			categoryId: 1,
			ingredients: {
				connect: [ingredients[19], ingredients[10], ingredients[5], ingredients[9], ingredients[2]],
			},
		},
	})

	const pizza3 = await prisma.product.create({
		data: {
			name: '–ö—Ä–µ–≤–µ—Ç–∫–∏ —ñ–∑ —Å–æ–ª–æ–¥–∫–∏–º —á–∏–ª—ñ',
			imageUrl: '/assets/img/pizzas/sweet-chili-shrimp',
			categoryId: 1,
			ingredients: {
				connect: [ingredients[20], ingredients[14], ingredients[16], ingredients[2]],
			},
		},
	})

	const pizza4 = await prisma.product.create({
		data: {
			name: '–°–∏—Ä–Ω–∞ üå±üë∂',
			imageUrl: '/assets/img/pizzas/cheese',
			categoryId: 1,
			ingredients: {
				connect: [ingredients[2], ingredients[3]],
			},
		},
	})

	const pizza5 = await prisma.product.create({
		data: {
			name: '–ü–µ–ø–µ—Ä–æ–Ω—ñ —Ñ—Ä–µ—à',
			imageUrl: '/assets/img/pizzas/pepperoni-fresh',
			categoryId: 1,
			ingredients: {
				connect: [ingredients[9], ingredients[2], ingredients[12]],
			},
		},
	})

	const pizza6 = await prisma.product.create({
		data: {
			name: '–ü–æ–¥–≤—ñ–π–Ω–µ –∫—É—Ä—á–∞ üë∂',
			imageUrl: '/assets/img/pizzas/double-chicken',
			categoryId: 1,
			ingredients: {
				connect: [ingredients[5], ingredients[2]],
			},
		},
	})

	const pizza7 = await prisma.product.create({
		data: {
			name: '–®–∏–Ω–∫–∞ —Ç–∞ —Å–∏—Ä',
			imageUrl: '/assets/img/pizzas/ham-and-cheese',
			categoryId: 1,
			ingredients: {
				connect: [ingredients[8], ingredients[2]],
			},
		},
	})

	const pizza8 = await prisma.product.create({
		data: {
			name: '–ß–æ—Ä—ñ–∑–æ —Ñ—Ä–µ—à',
			imageUrl: '/assets/img/pizzas/chorizo-fresh',
			categoryId: 1,
			ingredients: {
				connect: [ingredients[10], ingredients[16], ingredients[2]],
			},
		},
	})

	const pizza9 = await prisma.product.create({
		data: {
			name: '–ñ—é–ª—å—î–Ω',
			imageUrl: '/assets/img/pizzas/julien',
			categoryId: 1,
			ingredients: {
				connect: [
					ingredients[5],
					ingredients[6],
					ingredients[13],
					ingredients[2],
					ingredients[3],
					ingredients[21],
				],
			},
		},
	})

	const pizza10 = await prisma.product.create({
		data: {
			name: '–ü–µ—Å—Ç–æ',
			imageUrl: '/assets/img/pizzas/pesto',
			categoryId: 1,
			ingredients: {
				connect: [ingredients[5], ingredients[17], ingredients[12], ingredients[2]],
			},
		},
	})

	const pizza11 = await prisma.product.create({
		data: {
			name: '–ö–∞—Ä–±–æ–Ω–∞—Ä–∞',
			imageUrl: '/assets/img/pizzas/carbonara',
			categoryId: 1,
			ingredients: {
				connect: [
					ingredients[7],
					ingredients[3],
					ingredients[2],
					ingredients[12],
					ingredients[14],
					ingredients[15],
					ingredients[21],
				],
			},
		},
	})

	const pizza12 = await prisma.product.create({
		data: {
			name: `–ú'—è—Å–Ω–∞`,
			imageUrl: '/assets/img/pizzas/meat',
			categoryId: 1,
			ingredients: {
				connect: [ingredients[5], ingredients[8], ingredients[9], ingredients[10], ingredients[2]],
			},
		},
	})

	const pizza13 = await prisma.product.create({
		data: {
			name: '–ê—Ä—Ä—ñ–≤–∞',
			imageUrl: '/assets/img/pizzas/arriva',
			categoryId: 1,
			ingredients: {
				connect: [
					ingredients[5],
					ingredients[10],
					ingredients[16],
					ingredients[13],
					ingredients[12],
					ingredients[2],
					ingredients[21],
				],
			},
		},
	})

	const pizza14 = await prisma.product.create({
		data: {
			name: '–ë—É—Ä–≥–µ—Ä-–ø—ñ—Ü–∞',
			imageUrl: '/assets/img/pizzas/burger-pizza',
			categoryId: 1,
			ingredients: {
				connect: [
					ingredients[8],
					ingredients[11],
					ingredients[12],
					ingredients[13],
					ingredients[2],
					ingredients[21],
				],
			},
		},
	})

	const pizza15 = await prisma.product.create({
		data: {
			name: '–°–∏—Ä–Ω–µ –∫—É—Ä—á–∞',
			imageUrl: '/assets/img/pizzas/cheese-chicken',
			categoryId: 1,
			ingredients: {
				connect: [ingredients[5], ingredients[2], ingredients[3], ingredients[12], ingredients[21]],
			},
		},
	})

	const pizza16 = await prisma.product.create({
		data: {
			name: 'Next',
			imageUrl: '/assets/img/pizzas/next',
			categoryId: 1,
			ingredients: {
				connect: [
					ingredients[7],
					ingredients[18],
					ingredients[9],
					ingredients[2],
					ingredients[12],
					ingredients[8],
					ingredients[18],
					ingredients[13],
					ingredients[21],
				],
			},
		},
	})

	const pizza17 = await prisma.product.create({
		data: {
			name: '–ü–µ–ø–µ—Ä–æ–Ω—ñ',
			imageUrl: '/assets/img/pizzas/pepperoni',
			categoryId: 1,
			ingredients: {
				connect: [ingredients[9], ingredients[2]],
			},
		},
	})

	const pizza18 = await prisma.product.create({
		data: {
			name: '–ß–æ—Ç–∏—Ä–∏ —Å–µ–∑–æ–Ω–∏',
			imageUrl: '/assets/img/pizzas/four-seasons',
			categoryId: 1,
			ingredients: {
				connect: [
					ingredients[2],
					ingredients[8],
					ingredients[9],
					ingredients[17],
					ingredients[12],
					ingredients[8],
					ingredients[15],
				],
			},
		},
	})

	const pizza19 = await prisma.product.create({
		data: {
			name: '–ì–∞–≤–∞–π—Å—å–∫–∞',
			imageUrl: '/assets/img/pizzas/hawaiian',
			categoryId: 1,
			ingredients: {
				connect: [ingredients[5], ingredients[14], ingredients[2]],
			},
		},
	})

	const pizza20 = await prisma.product.create({
		data: {
			name: '–®–∏–Ω–∫–∞ —Ç–∞ –≥—Ä–∏–±–∏',
			imageUrl: '/assets/img/pizzas/ham-and-mushrooms',
			categoryId: 1,
			ingredients: {
				connect: [ingredients[8], ingredients[6], ingredients[2]],
			},
		},
	})

	const pizza21 = await prisma.product.create({
		data: {
			name: '–ö—É—Ä—á–∞ –±–∞—Ä–±–µ–∫—é',
			imageUrl: '/assets/img/pizzas/chicken-bbq',
			categoryId: 1,
			ingredients: {
				connect: [ingredients[5], ingredients[7], ingredients[13], ingredients[2]],
			},
		},
	})

	const pizza22 = await prisma.product.create({
		data: {
			name: '–ö—É—Ä—á–∞ —Ä–∞–Ω—á',
			imageUrl: '/assets/img/pizzas/chicken-ranch',
			categoryId: 1,
			ingredients: {
				connect: [ingredients[5], ingredients[8], ingredients[2], ingredients[12], ingredients[21]],
			},
		},
	})

	const pizza23 = await prisma.product.create({
		data: {
			name: '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ üå±',
			imageUrl: '/assets/img/pizzas/margarita',
			categoryId: 1,
			ingredients: {
				connect: [ingredients[2], ingredients[12], ingredients[15]],
			},
		},
	})

	const pizza24 = await prisma.product.create({
		data: {
			name: '–î—ñ–∞–±–ª–æ üå∂üå∂',
			imageUrl: '/assets/img/pizzas/diablo',
			categoryId: 1,
			ingredients: {
				connect: [
					ingredients[10],
					ingredients[4],
					ingredients[18],
					ingredients[12],
					ingredients[16],
					ingredients[13],
					ingredients[2],
				],
			},
		},
	})

	const pizza25 = await prisma.product.create({
		data: {
			name: '–ö–æ–≤–±–∞—Å–∫–∏ –±–∞—Ä–±–µ–∫—é',
			imageUrl: '/assets/img/pizzas/sausages-bbq',
			categoryId: 1,
			ingredients: {
				connect: [ingredients[10], ingredients[12], ingredients[13], ingredients[2]],
			},
		},
	})

	const pizza26 = await prisma.product.create({
		data: {
			name: '–û–≤–æ—á—ñ —Ç–∞ –≥—Ä–∏–±–∏ üå±',
			imageUrl: '/assets/img/pizzas/vegetables-and-mushrooms',
			categoryId: 1,
			ingredients: {
				connect: [
					ingredients[6],
					ingredients[12],
					ingredients[16],
					ingredients[13],
					ingredients[17],
					ingredients[2],
					ingredients[15],
				],
			},
		},
	})

	const pizza27 = await prisma.product.create({
		data: {
			name: `–ú'—è—Å–Ω–∏–π –º—ñ–∫—Å —ñ–∑ –±–∞–≤–∞—Ä—Å—å–∫–∏–º–∏ –∫–æ–≤–±–∞—Å–∫–∞–º–∏`,
			imageUrl: '/assets/img/pizzas/meat-mix-with-bavarian-sausages',
			categoryId: 1,
			ingredients: {
				connect: [ingredients[19], ingredients[9], ingredients[10], ingredients[7], ingredients[2]],
			},
		},
	})

	const pizza28 = await prisma.product.create({
		data: {
			name: '–ü–æ–¥–≤—ñ–π–Ω–∞ –ø–µ–ø–µ—Ä–æ–Ω—ñ',
			imageUrl: '/assets/img/pizzas/double-pepperoni',
			categoryId: 1,
			ingredients: {
				connect: [ingredients[10], ingredients[2]],
			},
		},
	})

	await prisma.productItem.createMany({
		data: [
			// –ë–µ—Ñ—Å—Ç—Ä–æ–≥–∞–Ω—ñ–≤
			{ productId: pizza1.id, price: 183, pizzaType: 1, pizzaSize: 20, weight: 410 },
			{ productId: pizza1.id, price: 273, pizzaType: 1, pizzaSize: 30, weight: 570 },
			{ productId: pizza1.id, price: 333, pizzaType: 1, pizzaSize: 40, weight: 770 },
			{ productId: pizza1.id, price: 273, pizzaType: 2, pizzaSize: 30, weight: 420 },
			{ productId: pizza1.id, price: 333, pizzaType: 2, pizzaSize: 40, weight: 680 },

			// –ú'—è—Å–Ω–∞ –∑ –∞–¥–∂–∏–∫–æ—é üå∂üå∂
			{ productId: pizza2.id, price: 183, pizzaType: 1, pizzaSize: 20, weight: 420 },
			{ productId: pizza2.id, price: 273, pizzaType: 1, pizzaSize: 30, weight: 610 },
			{ productId: pizza2.id, price: 333, pizzaType: 1, pizzaSize: 40, weight: 840 },
			{ productId: pizza2.id, price: 273, pizzaType: 2, pizzaSize: 30, weight: 520 },
			{ productId: pizza2.id, price: 333, pizzaType: 2, pizzaSize: 40, weight: 720 },

			// –ö—Ä–µ–≤–µ—Ç–∫–∏ —ñ–∑ —Å–æ–ª–æ–¥–∫–∏–º —á–∏–ª—ñ
			{ productId: pizza3.id, price: 196, pizzaType: 1, pizzaSize: 20, weight: 390 },
			{ productId: pizza3.id, price: 299, pizzaType: 1, pizzaSize: 30, weight: 630 },
			{ productId: pizza3.id, price: 333, pizzaType: 1, pizzaSize: 40, weight: 800 },
			{ productId: pizza3.id, price: 299, pizzaType: 2, pizzaSize: 30, weight: 490 },
			{ productId: pizza3.id, price: 333, pizzaType: 2, pizzaSize: 40, weight: 710 },

			// –°–∏—Ä–Ω–∞ üå±üë∂
			{ productId: pizza4.id, price: 99, pizzaType: 1, pizzaSize: 20, weight: 310 },
			{ productId: pizza4.id, price: 196, pizzaType: 1, pizzaSize: 30, weight: 470 },
			{ productId: pizza4.id, price: 239, pizzaType: 1, pizzaSize: 40, weight: 640 },
			{ productId: pizza4.id, price: 196, pizzaType: 2, pizzaSize: 30, weight: 360 },
			{ productId: pizza4.id, price: 239, pizzaType: 2, pizzaSize: 40, weight: 530 },

			// –ü–µ–ø–µ—Ä–æ–Ω—ñ —Ñ—Ä–µ—à
			{ productId: pizza5.id, price: 116, pizzaType: 1, pizzaSize: 20, weight: 380 },
			{ productId: pizza5.id, price: 203, pizzaType: 1, pizzaSize: 30, weight: 590 },
			{ productId: pizza5.id, price: 243, pizzaType: 1, pizzaSize: 40, weight: 790 },
			{ productId: pizza5.id, price: 203, pizzaType: 2, pizzaSize: 30, weight: 490 },
			{ productId: pizza5.id, price: 243, pizzaType: 2, pizzaSize: 40, weight: 670 },

			// –ü–æ–¥–≤—ñ–π–Ω–µ –∫—É—Ä—á–∞ üë∂
			{ productId: pizza6.id, price: 159, pizzaType: 1, pizzaSize: 20, weight: 360 },
			{ productId: pizza6.id, price: 236, pizzaType: 1, pizzaSize: 30, weight: 520 },
			{ productId: pizza6.id, price: 276, pizzaType: 1, pizzaSize: 40, weight: 730 },
			{ productId: pizza6.id, price: 236, pizzaType: 2, pizzaSize: 30, weight: 430 },
			{ productId: pizza6.id, price: 276, pizzaType: 2, pizzaSize: 40, weight: 610 },

			// –®–∏–Ω–∫–∞ —Ç–∞ —Å–∏—Ä
			{ productId: pizza7.id, price: 153, pizzaType: 1, pizzaSize: 20, weight: 320 },
			{ productId: pizza7.id, price: 226, pizzaType: 1, pizzaSize: 30, weight: 480 },
			{ productId: pizza7.id, price: 269, pizzaType: 1, pizzaSize: 40, weight: 630 },
			{ productId: pizza7.id, price: 226, pizzaType: 2, pizzaSize: 30, weight: 370 },
			{ productId: pizza7.id, price: 269, pizzaType: 2, pizzaSize: 40, weight: 550 },

			// –ß–æ—Ä—ñ–∑–æ —Ñ—Ä–µ—à
			{ productId: pizza8.id, price: 99, pizzaType: 1, pizzaSize: 20, weight: 330 },
			{ productId: pizza8.id, price: 193, pizzaType: 1, pizzaSize: 30, weight: 470 },
			{ productId: pizza8.id, price: 243, pizzaType: 1, pizzaSize: 40, weight: 630 },
			{ productId: pizza8.id, price: 193, pizzaType: 2, pizzaSize: 30, weight: 380 },
			{ productId: pizza8.id, price: 243, pizzaType: 2, pizzaSize: 40, weight: 500 },

			// –ñ—é–ª—å—î–Ω
			{ productId: pizza9.id, price: 199, pizzaType: 1, pizzaSize: 20, weight: 430 },
			{ productId: pizza9.id, price: 296, pizzaType: 1, pizzaSize: 30, weight: 630 },
			{ productId: pizza9.id, price: 343, pizzaType: 1, pizzaSize: 40, weight: 820 },
			{ productId: pizza9.id, price: 296, pizzaType: 2, pizzaSize: 30, weight: 510 },
			{ productId: pizza9.id, price: 343, pizzaType: 2, pizzaSize: 40, weight: 730 },

			// –ü–µ—Å—Ç–æ
			{ productId: pizza10.id, price: 209, pizzaType: 1, pizzaSize: 20, weight: 400 },
			{ productId: pizza10.id, price: 293, pizzaType: 1, pizzaSize: 30, weight: 610 },
			{ productId: pizza10.id, price: 349, pizzaType: 1, pizzaSize: 40, weight: 810 },
			{ productId: pizza10.id, price: 293, pizzaType: 2, pizzaSize: 30, weight: 490 },
			{ productId: pizza10.id, price: 349, pizzaType: 2, pizzaSize: 40, weight: 740 },

			// –ö–∞—Ä–±–æ–Ω–∞—Ä–∞
			{ productId: pizza11.id, price: 213, pizzaType: 1, pizzaSize: 20, weight: 410 },
			{ productId: pizza11.id, price: 323, pizzaType: 1, pizzaSize: 30, weight: 590 },
			{ productId: pizza11.id, price: 359, pizzaType: 1, pizzaSize: 40, weight: 800 },
			{ productId: pizza11.id, price: 323, pizzaType: 2, pizzaSize: 30, weight: 520 },
			{ productId: pizza11.id, price: 359, pizzaType: 2, pizzaSize: 40, weight: 710 },

			// –ú'—è—Å–Ω–∞
			{ productId: pizza12.id, price: 199, pizzaType: 1, pizzaSize: 20, weight: 390 },
			{ productId: pizza12.id, price: 296, pizzaType: 1, pizzaSize: 30, weight: 590 },
			{ productId: pizza12.id, price: 349, pizzaType: 1, pizzaSize: 40, weight: 820 },
			{ productId: pizza12.id, price: 296, pizzaType: 2, pizzaSize: 30, weight: 490 },
			{ productId: pizza12.id, price: 349, pizzaType: 2, pizzaSize: 40, weight: 700 },

			// –ê—Ä—Ä—ñ–≤–∞
			{ productId: pizza13.id, price: 206, pizzaType: 1, pizzaSize: 20, weight: 370 },
			{ productId: pizza13.id, price: 303, pizzaType: 1, pizzaSize: 30, weight: 570 },
			{ productId: pizza13.id, price: 369, pizzaType: 1, pizzaSize: 40, weight: 760 },
			{ productId: pizza13.id, price: 303, pizzaType: 2, pizzaSize: 30, weight: 460 },
			{ productId: pizza13.id, price: 369, pizzaType: 2, pizzaSize: 40, weight: 650 },

			// –ë—É—Ä–≥–µ—Ä-–ø—ñ—Ü–∞
			{ productId: pizza14.id, price: 119, pizzaType: 1, pizzaSize: 20, weight: 420 },
			{ productId: pizza14.id, price: 263, pizzaType: 1, pizzaSize: 30, weight: 630 },
			{ productId: pizza14.id, price: 329, pizzaType: 1, pizzaSize: 40, weight: 890 },
			{ productId: pizza14.id, price: 263, pizzaType: 2, pizzaSize: 30, weight: 540 },
			{ productId: pizza14.id, price: 329, pizzaType: 2, pizzaSize: 40, weight: 780 },

			// –°–∏—Ä–Ω–µ –∫—É—Ä—á–∞
			{ productId: pizza15.id, price: 203, pizzaType: 1, pizzaSize: 20, weight: 410 },
			{ productId: pizza15.id, price: 296, pizzaType: 1, pizzaSize: 30, weight: 620 },
			{ productId: pizza15.id, price: 346, pizzaType: 1, pizzaSize: 40, weight: 860 },
			{ productId: pizza15.id, price: 296, pizzaType: 2, pizzaSize: 30, weight: 510 },
			{ productId: pizza15.id, price: 346, pizzaType: 2, pizzaSize: 40, weight: 760 },

			// Next
			{ productId: pizza16.id, price: 256, pizzaType: 1, pizzaSize: 20, weight: 440 },
			{ productId: pizza16.id, price: 373, pizzaType: 1, pizzaSize: 30, weight: 720 },
			{ productId: pizza16.id, price: 423, pizzaType: 1, pizzaSize: 40, weight: 970 },
			{ productId: pizza16.id, price: 373, pizzaType: 2, pizzaSize: 30, weight: 620 },
			{ productId: pizza16.id, price: 423, pizzaType: 2, pizzaSize: 40, weight: 870 },

			// –ü–µ–ø–µ—Ä–æ–Ω—ñ
			{ productId: pizza17.id, price: 173, pizzaType: 1, pizzaSize: 20, weight: 340 },
			{ productId: pizza17.id, price: 263, pizzaType: 1, pizzaSize: 30, weight: 550 },
			{ productId: pizza17.id, price: 309, pizzaType: 1, pizzaSize: 40, weight: 760 },
			{ productId: pizza17.id, price: 263, pizzaType: 2, pizzaSize: 30, weight: 450 },
			{ productId: pizza17.id, price: 309, pizzaType: 2, pizzaSize: 40, weight: 630 },

			// –ß–æ—Ç–∏—Ä–∏ —Å–µ–∑–æ–Ω–∏
			{ productId: pizza18.id, price: 169, pizzaType: 1, pizzaSize: 20, weight: 380 },
			{ productId: pizza18.id, price: 263, pizzaType: 1, pizzaSize: 30, weight: 610 },
			{ productId: pizza18.id, price: 323, pizzaType: 1, pizzaSize: 40, weight: 840 },
			{ productId: pizza18.id, price: 263, pizzaType: 2, pizzaSize: 30, weight: 510 },
			{ productId: pizza18.id, price: 323, pizzaType: 2, pizzaSize: 40, weight: 730 },

			// –ì–∞–≤–∞–π—Å—å–∫–∞
			{ productId: pizza19.id, price: 173, pizzaType: 1, pizzaSize: 20, weight: 390 },
			{ productId: pizza19.id, price: 263, pizzaType: 1, pizzaSize: 30, weight: 590 },
			{ productId: pizza19.id, price: 309, pizzaType: 1, pizzaSize: 40, weight: 810 },
			{ productId: pizza19.id, price: 263, pizzaType: 2, pizzaSize: 30, weight: 490 },
			{ productId: pizza19.id, price: 309, pizzaType: 2, pizzaSize: 40, weight: 680 },

			// –®–∏–Ω–∫–∞ —Ç–∞ –≥—Ä–∏–±–∏
			{ productId: pizza20.id, price: 166, pizzaType: 1, pizzaSize: 20, weight: 370 },
			{ productId: pizza20.id, price: 253, pizzaType: 1, pizzaSize: 30, weight: 580 },
			{ productId: pizza20.id, price: 316, pizzaType: 1, pizzaSize: 40, weight: 740 },
			{ productId: pizza20.id, price: 253, pizzaType: 2, pizzaSize: 30, weight: 450 },
			{ productId: pizza20.id, price: 316, pizzaType: 2, pizzaSize: 40, weight: 660 },

			// –ö—É—Ä—á–∞ –±–∞—Ä–±–µ–∫—é
			{ productId: pizza21.id, price: 219, pizzaType: 1, pizzaSize: 20, weight: 420 },
			{ productId: pizza21.id, price: 329, pizzaType: 1, pizzaSize: 30, weight: 640 },
			{ productId: pizza21.id, price: 369, pizzaType: 1, pizzaSize: 40, weight: 900 },
			{ productId: pizza21.id, price: 329, pizzaType: 2, pizzaSize: 30, weight: 540 },
			{ productId: pizza21.id, price: 369, pizzaType: 2, pizzaSize: 40, weight: 780 },

			// –ö—É—Ä—á–∞ —Ä–∞–Ω—á
			{ productId: pizza22.id, price: 233, pizzaType: 1, pizzaSize: 20, weight: 390 },
			{ productId: pizza22.id, price: 336, pizzaType: 1, pizzaSize: 30, weight: 610 },
			{ productId: pizza22.id, price: 393, pizzaType: 1, pizzaSize: 40, weight: 880 },
			{ productId: pizza22.id, price: 336, pizzaType: 2, pizzaSize: 30, weight: 530 },
			{ productId: pizza22.id, price: 393, pizzaType: 2, pizzaSize: 40, weight: 740 },

			// –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ üå±
			{ productId: pizza23.id, price: 169, pizzaType: 1, pizzaSize: 20, weight: 400 },
			{ productId: pizza23.id, price: 253, pizzaType: 1, pizzaSize: 30, weight: 590 },
			{ productId: pizza23.id, price: 309, pizzaType: 1, pizzaSize: 40, weight: 830 },
			{ productId: pizza23.id, price: 253, pizzaType: 2, pizzaSize: 30, weight: 500 },
			{ productId: pizza23.id, price: 309, pizzaType: 2, pizzaSize: 40, weight: 710 },

			// –î—ñ–∞–±–ª–æ üå∂üå∂
			{ productId: pizza24.id, price: 219, pizzaType: 1, pizzaSize: 20, weight: 420 },
			{ productId: pizza24.id, price: 329, pizzaType: 1, pizzaSize: 30, weight: 680 },
			{ productId: pizza24.id, price: 386, pizzaType: 1, pizzaSize: 40, weight: 940 },
			{ productId: pizza24.id, price: 329, pizzaType: 2, pizzaSize: 30, weight: 560 },
			{ productId: pizza24.id, price: 386, pizzaType: 2, pizzaSize: 40, weight: 800 },

			// –ö–æ–≤–±–∞—Å–∫–∏ –±–∞—Ä–±–µ–∫—é
			{ productId: pizza25.id, price: 176, pizzaType: 1, pizzaSize: 20, weight: 370 },
			{ productId: pizza25.id, price: 266, pizzaType: 1, pizzaSize: 30, weight: 570 },
			{ productId: pizza25.id, price: 336, pizzaType: 1, pizzaSize: 40, weight: 760 },
			{ productId: pizza25.id, price: 266, pizzaType: 2, pizzaSize: 30, weight: 480 },
			{ productId: pizza25.id, price: 336, pizzaType: 2, pizzaSize: 40, weight: 670 },

			// –û–≤–æ—á—ñ —Ç–∞ –≥—Ä–∏–±–∏ üå±
			{ productId: pizza26.id, price: 193, pizzaType: 1, pizzaSize: 20, weight: 420 },
			{ productId: pizza26.id, price: 296, pizzaType: 1, pizzaSize: 30, weight: 610 },
			{ productId: pizza26.id, price: 343, pizzaType: 1, pizzaSize: 40, weight: 870 },
			{ productId: pizza26.id, price: 296, pizzaType: 2, pizzaSize: 30, weight: 530 },
			{ productId: pizza26.id, price: 343, pizzaType: 2, pizzaSize: 40, weight: 740 },

			// –ú'—è—Å–Ω–∏–π –º—ñ–∫—Å —ñ–∑ –±–∞–≤–∞—Ä—Å—å–∫–∏–º–∏ –∫–æ–≤–±–∞—Å–∫–∞–º–∏
			{ productId: pizza27.id, price: 193, pizzaType: 1, pizzaSize: 20, weight: 370 },
			{ productId: pizza27.id, price: 289, pizzaType: 1, pizzaSize: 30, weight: 580 },
			{ productId: pizza27.id, price: 351, pizzaType: 1, pizzaSize: 40, weight: 790 },
			{ productId: pizza27.id, price: 289, pizzaType: 2, pizzaSize: 30, weight: 460 },
			{ productId: pizza27.id, price: 351, pizzaType: 2, pizzaSize: 40, weight: 670 },

			// –ü–æ–¥–≤—ñ–π–Ω–∞ –ø–µ–ø–µ—Ä–æ–Ω—ñ
			{ productId: pizza28.id, price: 196, pizzaType: 1, pizzaSize: 20, weight: 390 },
			{ productId: pizza28.id, price: 303, pizzaType: 1, pizzaSize: 30, weight: 620 },
			{ productId: pizza28.id, price: 343, pizzaType: 1, pizzaSize: 40, weight: 770 },
			{ productId: pizza28.id, price: 303, pizzaType: 2, pizzaSize: 30, weight: 490 },
			{ productId: pizza28.id, price: 343, pizzaType: 2, pizzaSize: 40, weight: 660 },

			// –û–º–ª–µ—Ç –∑ —à–∏–Ω–∫–æ—é —ñ –≥—Ä–∏–±–∞–º–∏
			{ productId: 1, price: randomNumber(100, 180), weight: 110 },

			// –û–º–ª–µ—Ç –∑ –ø–µ–ø–µ—Ä–æ–Ω—ñ
			{ productId: 2, price: randomNumber(100, 180), weight: 110 },

			// –û–º–ª–µ—Ç —ñ–∑ –±–µ–∫–æ–Ω–æ–º
			{ productId: 3, price: randomNumber(100, 180), weight: 130 },

			// –û–º–ª–µ—Ç —Å–∏—Ä–Ω–∏–π
			{ productId: 4, price: randomNumber(100, 180), weight: 100 },

			// –î–æ–¥—Å—Ç–µ—Ä —ñ–∑ —à–∏–Ω–∫–æ—é
			{ productId: 5, price: randomNumber(100, 180), weight: 160 },

			// –°–∏—Ä–Ω–∏–∫–∏ –∑—ñ –∑–≥—É—â–µ–Ω–∏–º –º–æ–ª–æ–∫–æ–º
			{ productId: 6, price: randomNumber(100, 180), weight: 140 },

			// –°–∏—Ä–Ω–∏–∫–∏ –∑ –º–∞–ª–∏–Ω–æ–≤–∏–º –≤–∞—Ä–µ–Ω–Ω—è–º üë∂
			{ productId: 7, price: randomNumber(100, 180), weight: 150 },

			// –°–∏—Ä–Ω–∏–∫–∏
			{ productId: 8, price: randomNumber(100, 180), weight: 130 },

			// –ö–∞–≤–∞ –ê–º–µ—Ä–∏–∫–∞–Ω–æ
			{ productId: 9, price: randomNumber(100, 180), weight: 380 },

			// –ö–∞–≤–∞ –ö–∞–ø—É—á—ñ–Ω–æ
			{ productId: 10, price: randomNumber(100, 180), weight: 250 },

			// –ö–∞–≤–∞ –õ–∞—Ç—Ç–µ
			{ productId: 11, price: randomNumber(100, 180), weight: 330 },

			// –ö–æ–º–±–æ –°–Ω—ñ–¥–∞–Ω–æ–∫ –Ω–∞ –¥–≤–æ—Ö
			{ productId: 12, price: randomNumber(100, 180) },

			// –ü–∞—Å—Ç–∞ –∑ –∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏
			{ productId: 13, price: randomNumber(100, 180), weight: 300 },

			// –î–µ–Ω–≤—ñ—á —à–∏–Ω–∫–∞ —Ç–∞ —Å–∏—Ä
			{ productId: 14, price: randomNumber(100, 180), weight: 210 },

			// –î–µ–Ω–≤—ñ—á —á–æ—Ä–∏–∑–æ –±–∞—Ä–±–µ–∫—é
			{ productId: 15, price: randomNumber(100, 180), weight: 210 },

			// –ü–∞—Å—Ç–∞ –ö–∞—Ä–±–æ–Ω–∞—Ä–∞
			{ productId: 16, price: randomNumber(100, 180), weight: 350 },

			// –ü–∞—Å—Ç–∞ –ú'—è—Å–Ω–∞
			{ productId: 17, price: randomNumber(100, 180), weight: 330 },

			// –ü–∞—Å—Ç–∞ –ü–µ—Å—Ç–æ
			{ productId: 18, price: randomNumber(100, 180), weight: 330 },

			// –°—É–ø–µ—Ä–º—è—Å–Ω–æ–π –î–æ–¥—Å—Ç–µ—Ä
			{ productId: 19, price: randomNumber(100, 180), weight: 160 },

			// –î–æ–¥—Å—Ç–µ—Ä —ñ–∑ —à–∏–Ω–∫–æ—é
			{ productId: 20, price: randomNumber(100, 180), weight: 160 },

			// –î–æ–¥—Å—Ç–µ—Ä
			{ productId: 21, price: randomNumber(100, 180), weight: 210 },

			// –û—Å—Ç—Ä—ã–π –î–æ–¥—Å—Ç–µ—Ä üå∂üå∂
			{ productId: 22, price: randomNumber(100, 180), weight: 190 },

			// –ì—Ä–∏–±–Ω–∏–π –°—Ç–∞—Ä—Ç–µ—Ä üå±
			{ productId: 23, price: randomNumber(100, 180), weight: 160 },

			// –ö—É—Ä—è—á—ñ –Ω–∞–≥–µ—Ç—Å–∏
			{ productId: 24, price: randomNumber(100, 180), weight: 110 },

			// –ö–∞—Ä—Ç–æ–ø–ª—è –∑ –ø–µ—á—ñ –∑ —Å–æ—É—Å–æ–º üå±üë∂
			{ productId: 25, price: randomNumber(100, 180), weight: 100 },

			// –ö–∞—Ä—Ç–æ–ø–ª—è –∑ –ø–µ—á—ñ üå±üë∂
			{ productId: 26, price: randomNumber(100, 180), weight: 80 },

			// –ö—É—Ä—è—á—ñ —à–º–∞—Ç–æ—á–∫–∏ üë∂
			{ productId: 27, price: randomNumber(100, 180), weight: 120 },

			// –ö—É—Ä—è—á—ñ –∫—Ä–∏–ª–∞ –±–∞—Ä–±–µ–∫—é
			{ productId: 28, price: randomNumber(100, 180), weight: 140 },

			// –õ–∞–Ω—á–±–æ–∫—Å –∑ –∫—É—Ä—è—á–∏–º–∏ –∫—Ä–∏–ª–∞–º–∏
			{ productId: 29, price: randomNumber(100, 180), weight: 210 },

			// –õ–∞–Ω—á–±–æ–∫—Å —ñ–∑ –∫—É—Ä—è—á–∏–º–∏ —à–º–∞—Ç–æ—á–∫–∞–º–∏
			{ productId: 30, price: randomNumber(100, 180), weight: 200 },

			// –°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä
			{ productId: 31, price: randomNumber(100, 180), weight: 170 },

			// –ú–æ–ª–æ—á–Ω–∏–π –∫–æ–∫—Ç–µ–π–ª—å –û–∂–∏–Ω–∞-–º–∞–ª–∏–Ω–∞
			{ productId: 32, price: randomNumber(100, 180), weight: 300 },

			// –ú–æ–ª–æ—á–Ω–∏–π –∫–æ–∫—Ç–µ–π–ª—å –ü—ñ–Ω–∞ –ö–æ–ª–∞–¥–∞
			{ productId: 33, price: randomNumber(100, 180), weight: 300 },

			// –ú–æ–ª–æ—á–Ω–∏–π –∫–æ–∫—Ç–µ–π–ª—å —ñ–∑ –ø–µ—á–∏–≤–æ–º Oreo
			{ productId: 34, price: randomNumber(100, 180), weight: 300 },

			// –ö–ª–∞—Å–∏—á–Ω–∏–π –º–æ–ª–æ—á–Ω–∏–π –∫–æ–∫—Ç–µ–π–ª—å
			{ productId: 35, price: randomNumber(100, 180), weight: 300 },

			// –ü–æ–ª—É–Ω–∏—á–Ω–∏–π –º–æ–ª–æ—á–Ω–∏–π –∫–æ–∫—Ç–µ–π–ª—å
			{ productId: 36, price: randomNumber(100, 180), weight: 300 },

			// –®–æ–∫–æ–ª–∞–¥–Ω–∏–π –º–æ–ª–æ—á–Ω–∏–π –∫–æ–∫—Ç–µ–π–ª—å
			{ productId: 37, price: randomNumber(100, 180), weight: 300 },

			// –ö–∞–∫–∞–æ
			{ productId: 38, price: randomNumber(100, 180), weight: 240 },

			// Rich Tea –ß–æ—Ä–Ω–∏–π –∑ –ª–∏–º–æ–Ω–æ–º
			{ productId: 39, price: randomNumber(100, 180), weight: 500 },

			// Rich Tea –ó–µ–ª–µ–Ω–∏–π
			{ productId: 40, price: randomNumber(100, 180), weight: 500 },

			// Rich Tea –ó–µ–ª–µ–Ω–∏–π –∑ –º–∞–Ω–≥–æ
			{ productId: 41, price: randomNumber(100, 180), weight: 500 },

			// Rich —Å—ñ–∫ –ê–ø–µ–ª—å—Å–∏–Ω–æ–≤–∏–π
			{ productId: 42, price: randomNumber(100, 180), weight: 1000 },

			// Rich —Å—ñ–∫ –Ø–±–ª—É—á–Ω–∏–π
			{ productId: 43, price: randomNumber(100, 180), weight: 1000 },

			// Rich –Ω–µ–∫—Ç–∞—Ä –í–∏—à–Ω–µ–≤–∏–π
			{ productId: 44, price: randomNumber(100, 180), weight: 1000 },

			// –ö–∞–≤–∞ –ö–∞—Ä–∞–º–µ–ª—å–Ω–∞ –∫–∞–ø—É—á–∏–Ω–æ
			{ productId: 45, price: randomNumber(100, 180), weight: 230 },

			// –ö–∞–≤–∞ –ö–æ–∫–æ—Å–æ–≤–∏–π –ª–∞—Ç—Ç–µ
			{ productId: 46, price: randomNumber(100, 180), weight: 300 },

			// –ö–∞–≤–∞ –ì–æ—Ä—ñ—Ö–æ–≤–∏–π –ª–∞—Ç—Ç–µ
			{ productId: 47, price: randomNumber(100, 180), weight: 300 },

			// –ê–π—Å –∫–∞–ø—É—á—ñ–Ω–æ
			{ productId: 48, price: randomNumber(100, 180), weight: 280 },

			// –ö–∞–≤–∞ –ê–º–µ—Ä–∏–∫–∞–Ω–æ
			{ productId: 49, price: randomNumber(100, 180), weight: 280 },

			// –ö–∞–≤–∞ –ö–∞–ø—É—á—ñ–Ω–æ
			{ productId: 50, price: randomNumber(100, 180), weight: 250 },

			// –ö–∞–≤–∞ –õ–∞—Ç—Ç–µ
			{ productId: 51, price: randomNumber(100, 180), weight: 330 },

			// –ß—ñ–∫–µ–Ω –±–æ–∫—Å
			{ productId: 52, price: randomNumber(100, 180) },

			// –ö–æ–º–±–æ –°–Ω—ñ–¥–∞–Ω–æ–∫ –Ω–∞ –¥–≤–æ—Ö
			{ productId: 53, price: randomNumber(100, 180) },

			// 3 –ø—ñ—Ü–∏ 25 —Å–º
			{ productId: 54, price: randomNumber(100, 180) },

			// 2 –ø—ñ—Ü–∏
			{ productId: 55, price: randomNumber(100, 180) },

			// 3 –ø—ñ—Ü–∏
			{ productId: 56, price: randomNumber(100, 180) },

			// 4 –ó–∞–∫—É—Å–∫–∏
			{ productId: 57, price: randomNumber(100, 180) },

			// 2 —Ñ—ñ—Ä–º–æ–≤—ñ –∑–∞–∫—É—Å–∫–∏
			{ productId: 58, price: randomNumber(100, 180) },

			// 2 –¥–µ—Å–µ—Ä—Ç–∏
			{ productId: 59, price: randomNumber(100, 180) },

			// 2 –∫–∞–≤–∏: –õ–∞—Ç—Ç–µ –∞–±–æ –ö–∞–ø—É—á—ñ–Ω–æ
			{ productId: 60, price: randomNumber(100, 180) },

			// 2 —Å–æ—É—Å–∏
			{ productId: 61, price: randomNumber(100, 180) },

			// –ß—ñ–∑–∫–µ–π–∫ –ù—å—é-–ô–æ—Ä–∫ –∑ –∫–æ–∫–æ—Å–æ–º
			{ productId: 62, price: randomNumber(100, 180), weight: 100 },

			// –ë–æ–Ω–∏
			{ productId: 63, price: randomNumber(100, 180), weight: 120 },

			// –õ–∏—Å—Ç–∫–æ–≤—ñ –ø–∞–ª–∏—á–∫–∏ –∑ –∞–Ω–∞–Ω–∞—Å–∞–º–∏ —Ç–∞ –±—Ä—É—Å–Ω–∏—Ü–µ—é
			{ productId: 64, price: randomNumber(100, 180), weight: 260 },

			// –ú–∞–∫–∞—Ä–æ–Ω –º–∞–Ω–≥–æ-–º–∞—Ä–∞–∫—É–π—è
			{ productId: 65, price: randomNumber(100, 180), weight: 24 },

			// –ß—ñ–∑–∫–µ–π–∫ –ù—å—é-–ô–æ—Ä–∫
			{ productId: 66, price: randomNumber(100, 180), weight: 100 },

			// –ß—ñ–∑–∫–µ–π–∫ –ë–∞–Ω–∞–Ω–æ–≤–∏–π —ñ–∑ —à–æ–∫–æ–ª–∞–¥–Ω–∏–º –ø–µ—á–∏–≤–æ–º
			{ productId: 67, price: randomNumber(100, 180), weight: 100 },

			// –ï–∫–ª–µ—Ä–∏-–º—ñ–Ω—ñ —ñ–∑ –∑–∞–≤–∞—Ä–Ω–∏–º –∫—Ä–µ–º–æ–º
			{ productId: 68, price: randomNumber(100, 180), weight: 45 },

			// –®–æ–∫–æ–ª–∞–¥–Ω–∏–π –∫—É–∫—ñ—Å
			{ productId: 69, price: randomNumber(100, 180), weight: 70 },

			// –§–æ–Ω–¥–∞–Ω
			{ productId: 70, price: randomNumber(100, 180), weight: 160 },

			// –ú–∞—Ñ—ñ–Ω –°–æ–ª–µ–Ω–∞ –∫–∞—Ä–∞–º–µ–ª—å
			{ productId: 71, price: randomNumber(100, 180), weight: 120 },

			// –ú–∞—Ñ—Ñ—ñ–Ω –¢—Ä–∏ —à–æ–∫–æ–ª–∞–¥–∏
			{ productId: 72, price: randomNumber(100, 180), weight: 120 },

			// –ë—Ä—É—Å–ª–µ—Ç–∏–∫–∏
			{ productId: 73, price: randomNumber(100, 180), weight: 260 },

			// –°–∏—Ä–Ω–∏–∫–∏ –∑—ñ –∑–≥—É—â–µ–Ω–∏–º –º–æ–ª–æ–∫–æ–º
			{ productId: 74, price: randomNumber(100, 180), weight: 150 },

			// –°–∏—Ä–Ω–∏–∫–∏ –∑ –º–∞–ª–∏–Ω–æ–≤–∏–º –≤–∞—Ä–µ–Ω–Ω—è–º üë∂
			{ productId: 75, price: randomNumber(100, 180), weight: 140 },

			// –°–∏—Ä–Ω–∏–∫–∏
			{ productId: 76, price: randomNumber(100, 180), weight: 130 },

			// –ö—É—Ä—è—á—ñ —à–º–∞—Ç–æ—á–∫–∏ üë∂
			{ productId: 77, price: randomNumber(100, 180), weight: 120 },

			// –ö—É—Ä—è—á—ñ –Ω–∞–≥–µ—Ç—Å–∏
			{ productId: 78, price: randomNumber(100, 180), weight: 110 },

			// –ö–∞—Ä—Ç–æ–ø–ª—è –∑ –ø–µ—á—ñ üå±üë∂
			{ productId: 79, price: randomNumber(100, 180), weight: 80 },

			// –°–∏—Ä–Ω–∏–∫–∏ –∑ –º–∞–ª–∏–Ω–æ–≤–∏–º –≤–∞—Ä–µ–Ω–Ω—è–º üë∂
			{ productId: 80, price: randomNumber(100, 180), weight: 150 },

			// –°–∏—Ä–Ω–∏–∫–∏ –∑—ñ –∑–≥—É—â–µ–Ω–∏–º –º–æ–ª–æ–∫–æ–º
			{ productId: 81, price: randomNumber(100, 180), weight: 140 },

			// –ú–µ–¥–æ–≤–æ-–≥—ñ—Ä—á–∏—á–Ω–∏–π
			{ productId: 82, price: randomNumber(100, 180), weight: 25 },

			// –°–æ–ª–æ–¥–∫–∏–π —á–∏–ª—ñ
			{ productId: 83, price: randomNumber(100, 180), weight: 25 },

			// –°–∏—Ä–Ω–∏–π
			{ productId: 84, price: randomNumber(100, 180), weight: 25 },

			// –ß–∞—Å–Ω–∏–∫–æ–≤–∏–π
			{ productId: 85, price: randomNumber(100, 180), weight: 25 },

			// –ë–∞—Ä–±–µ–∫—é
			{ productId: 86, price: randomNumber(100, 180), weight: 25 },

			// –ú–∞–ª–∏–Ω–æ–≤–µ –≤–∞—Ä–µ–Ω–Ω—è
			{ productId: 87, price: randomNumber(100, 180), weight: 25 },

			{ productId: 88, price: randomNumber(100, 180) },
		],
	})

	await prisma.cart.createMany({
		data: [
			{
				userId: 1,
				token: '11111',
				totalAmount: 0,
			},
			{
				userId: 2,
				token: '22222',
				totalAmount: 0,
			},
		],
	})

	await prisma.cartItem.create({
		data: {
			productItemId: 1,
			cartId: 1,
			userId: 1,
			ingredients: {
				connect: [{ id: 1 }, { id: 2 }, { id: 3 }],
			},
		},
	})

	await prisma.story.createMany({
		data: stories,
	})

	await prisma.storyItem.createMany({
		data: storyItems,
	})
}

async function down() {
	await prisma.$executeRaw`TRUNCATE TABLE "User" RESTART IDENTITY CASCADE;`
	await prisma.$executeRaw`TRUNCATE TABLE "Category" RESTART IDENTITY CASCADE;`
	await prisma.$executeRaw`TRUNCATE TABLE "Product" RESTART IDENTITY CASCADE;`
	await prisma.$executeRaw`TRUNCATE TABLE "ProductItem" RESTART IDENTITY CASCADE;`
	await prisma.$executeRaw`TRUNCATE TABLE "Ingredient" RESTART IDENTITY CASCADE;`
	await prisma.$executeRaw`TRUNCATE TABLE "Cart" RESTART IDENTITY CASCADE;`
	await prisma.$executeRaw`TRUNCATE TABLE "CartItem" RESTART IDENTITY CASCADE;`
	await prisma.$executeRaw`TRUNCATE TABLE "Order" RESTART IDENTITY CASCADE;`
	await prisma.$executeRaw`TRUNCATE TABLE "State" RESTART IDENTITY CASCADE;`
	await prisma.$executeRaw`TRUNCATE TABLE "District" RESTART IDENTITY CASCADE;`
	await prisma.$executeRaw`TRUNCATE TABLE "Community" RESTART IDENTITY CASCADE;`
	await prisma.$executeRaw`TRUNCATE TABLE "City" RESTART IDENTITY CASCADE;`
	await prisma.$executeRaw`TRUNCATE TABLE "Village" RESTART IDENTITY CASCADE;`
	await prisma.$executeRaw`TRUNCATE TABLE "VerificationCode" RESTART IDENTITY CASCADE;`
	await prisma.$executeRaw`TRUNCATE TABLE "Story" RESTART IDENTITY CASCADE;`
	await prisma.$executeRaw`TRUNCATE TABLE "StoryItem" RESTART IDENTITY CASCADE;`
}

async function main() {
	try {
		await down()
		await up()
	} catch (e) {
		console.error(e)
	}
}

main()
	.then(async () => {
		await prisma.$disconnect()
	})
	.catch(async (e) => {
		console.error(e)
		await prisma.$disconnect()
		process.exit(1)
	})
