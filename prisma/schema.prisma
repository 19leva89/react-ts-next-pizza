generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum UserRole {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum DiscountType {
  PERCENT
  FIXED
}

model User {
  id               Int               @id @default(autoincrement())
  fullName         String
  email            String            @unique
  password         String
  //
  role             UserRole          @default(USER)
  verified         DateTime?
  verificationCode VerificationCode?
  //
  cart             Cart[]            @relation("UserCart")
  cartItems        CartItem[]
  orders           Order[]
  //
  provider         String?
  providerId       String?
  //
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  slug      String    @unique
  products  Product[]
  //
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  imageUrl     String
  discount     Int           @default(0)
  discountType DiscountType?
  //
  items        ProductItem[]
  ingredients  Ingredient[]
  //
  category     Category      @relation(fields: [categoryId], references: [id])
  categoryId   Int
  //
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model ProductItem {
  id        Int        @id @default(autoincrement())
  price     Int
  pizzaSize Int?
  pizzaType Int?
  //
  cartItems CartItem[]
  //
  product   Product    @relation(fields: [productId], references: [id])
  productId Int
  //
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Ingredient {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  price     Int
  imageUrl  String
  //
  products  Product[]
  cartItems CartItem[]
  //
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Cart {
  id          Int        @id @default(autoincrement())
  //
  user        User?      @relation("UserCart", fields: [userId], references: [id])
  userId      Int?
  //
  token       String     @unique
  //
  items       CartItem[]
  totalAmount Int        @default(0)
  //
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model CartItem {
  id            Int          @id @default(autoincrement())
  //
  cart          Cart         @relation(fields: [cartId], references: [id])
  cartId        Int
  //
  productItem   ProductItem  @relation(fields: [productItemId], references: [id])
  productItemId Int
  //
  user          User?        @relation(fields: [userId], references: [id])
  userId        Int?
  //
  ingredients   Ingredient[]
  quantity      Int          @default(1)
  //
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Order {
  id            Int         @id @default(autoincrement())
  fullName      String
  email         String
  phone         String
  //
  region        Region      @relation(fields: [regionId], references: [id])
  regionId      Int
  //
  city          City        @relation(fields: [cityId], references: [id])
  cityId        Int
  //
  address       String
  comment       String?
  //
  user          User?       @relation(fields: [userId], references: [id])
  userId        Int?
  //
  token         String
  //
  items         Json
  discount      Int         @default(0)
  deliveryPrice Int         @default(0)
  totalAmount   Int
  paymentId     String?
  status        OrderStatus @default(PENDING)
  //
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Region {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  //
  cities City[]
  orders Order[]
}

model City {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  //
  region   Region  @relation(fields: [regionId], references: [id])
  regionId Int
  //
  orders   Order[]
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  //
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique
  //
  code      String
  //
  createdAt DateTime @default(now())

  @@unique([userId, code])
}

model Story {
  id        Int         @id @default(autoincrement())
  imageUrl  String
  //
  items     StoryItem[]
  //
  createdAt DateTime    @default(now())
}

model StoryItem {
  id        Int      @id @default(autoincrement())
  sourceUrl String
  //
  story     Story    @relation(fields: [storyId], references: [id])
  storyId   Int
  //
  createdAt DateTime @default(now())
}
